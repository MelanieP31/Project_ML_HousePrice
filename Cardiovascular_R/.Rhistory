main = "Repartition des patents selon la presence d'une maladie cardiovasculaire \n et le sexe",
ylim = c(0,150),
cex.main = 1.2,
cex.lab = 1.2
)
legend("top", legend = levels(data$target), fill = c("#003049", "#d62828"),
title = "Maladie cardiovasculaire", horiz = TRUE)
text(x = barplotST, y = table(data$target, data$sex)+7,
labels = as.character(table(data$target, data$sex)), cex = 1.1, font = 3)
## Variables target/thal
barplotThalT <- barplot(table(data$target, data$thalassemia),
beside = TRUE,
col = c("#003049", "#d62828"),
xlab = "Thalassemia",
ylab = "Patients",
las = 1,
main = "Repartition des patents selon la presence d'une maladie cardiovasculaire \n et de thalassemie",
ylim = c(0,150),
cex.main = 1.2,
cex.lab = 1.2
)
legend("top", legend = levels(data$target), fill = c("#003049", "#d62828"),
title = "Maladie cardiovasculaire", horiz = TRUE)
text(x = barplotThalT, y = table(data$target, data$thalassemia)+7,
labels = as.character(table(data$target, data$thalassemia)), cex = 1.1, font = 3)
## Variables target/chest_pain
barplotTC <- barplot(table(data$target, data$chest_pain),
beside = TRUE,
col = c("#003049", "#d62828"),
xlab = "Type of chest pain",
ylab = "Patients",
las = 1,
main = "Repartition des patents selon la presence d'une maladie cardiovasculaire \n et du type de douleurs thoracique",
ylim = c(0,150),
cex.main = 1.2,
cex.lab = 1.2
)
legend("top", legend = levels(data$target), fill = c("#003049", "#d62828"),
title = "Maladie cardiovasculaire", horiz = TRUE)
text(x = barplotTC, y = table(data$target, data$chest_pain)+7,
labels = as.character(table(data$target, data$chest_pain)), cex = 1.1, font = 3)
# Boites a moustaches croisees
## Variable target/age
boxplot(data$age ~ data$target,
main = "Boite a moustaches de la population selon l'age et la presence \n de maladie cardiovasculaire",
xlab = "Presence d'une maladie cardiovasculaire",
ylab = "Age",
col = "yellow",
las = 1,
ylim = c(20, 80),
cex.main = 1.2,
cex.lab = 1.2
)
## Variable target/trestbps
boxplot(data$rest_bp ~ data$target,
main = "Boite a moustaches de la population selon la tension arterielle au repos \n et la presence de maladie cardiovasculaire",
xlab = "Presence d'une maladie cardiovasculaire",
ylab = "Tension arterielle au repos",
col = "yellow",
las = 1,
cex.main = 1.2,
cex.lab = 1.2
)
## Calcul des pourcentages
round(prop.table(table(data$sex, data$target), margin = 1), 4)*100
round(prop.table(table(data$chest_pain, data$target), margin = 1), 4)*100
round(prop.table(table(data$ex_ang, data$target), margin = 1), 4)*100
round(prop.table(table(data$slope, data$target), margin = 1), 4)*100
round(prop.table(table(data$ca, data$target), margin = 1), 4)*100
round(prop.table(table(data$thalassemia, data$target), margin = 1), 4)*100
## Test du Khi-2 (variables qualitatives)
## H0 : Les deux variables sont independantes (si p-value > 0,05)
## H1 : Les deux variables sont dependantes (si p-value < 0,05)
chisq.test(data$sex, data$target) #H1
chisq.test(data$chest_pain, data$target) #H1
chisq.test(data$fbs, data$target) #H0
chisq.test(data$rest_ecg, data$target) #H1
chisq.test(data$ex_ang, data$target) #H1
chisq.test(data$slope, data$target) #H1
chisq.test(data$ca, data$target) #H1
chisq.test(data$thalassemia, data$target) #H1
## Calcul des moyennes
tapply(data$age, data$target, mean)
tapply(data$rest_bp, data$target, mean)
tapply(data$chol, data$target, mean)
tapply(data$max_hr, data$target, mean)
tapply(data$oldpeak, data$target, mean)
## Test de Shapiro-Wilk
### H0 : L'echantillon suit une distribution normale (si p-value > 0,05)
### H1 : L'echantillon ne suit pas une distribution normale (si p-value < 0,05)
library(dplyr)
shapiro.test(filter(data, target == "Oui")$age) # H1
shapiro.test(filter(data, target == "Oui")$rest_bp) # H1
shapiro.test(filter(data, target == "Oui")$chol) # H0
shapiro.test(filter(data, target == "Oui")$max_hr) # H0
shapiro.test(filter(data, target == "Oui")$oldpeak) # H1
## Test de Mann-Whitney
### H0 : Il n'y a pas de difference significative entre la moyenne des deux variables (si p-value > 0,05)
### H1 : Il y a une difference significative entre la moyenne des deux variables (si p-value < 0,05)
wilcox.test(data$age~data$target)
wilcox.test(data$rest_bp~data$target)
wilcox.test(data$oldpeak~data$target)
## Test de Student
### H0 : Il n'y a pas de difference significative entre la moyenne des deux variables (si p-value > 0,05)
### H1 : Il y a une difference significative entre la moyenne des deux variables (si p-value < 0,05)
t.test(data$chol~data$target)
t.test(data$max_hr~data$target)
# Modele de regression logistique
## Division du jeu de donnees en jeu d'entrainement et de test
set.seed(99)
library(caTools)
split = sample.split(data$target, SplitRatio = 0.8)
train = subset(data, split == TRUE)
test = subset(data, split == FALSE)
## Creation du modele
RegressionLogistique = glm(target ~., data = train, family = "binomial")
summary(RegressionLogistique)
## Optimisation du modele de regression logistique pour ne conserver que les variables significatives
RegressionLogistique = update(RegressionLogistique, .~.-rest_ecg)
RegressionLogistique = update(RegressionLogistique, .~.-slope)
RegressionLogistique = update(RegressionLogistique, .~.-thalassemia)
RegressionLogistique = update(RegressionLogistique, .~.-age)
RegressionLogistique = update(RegressionLogistique, .~.-fbs)
RegressionLogistique = update(RegressionLogistique, .~.-chol)
RegressionLogistique = update(RegressionLogistique, .~.-max_hr)
RegressionLogistique = update(RegressionLogistique, .~.-rest_bp)
summary(RegressionLogistique)
# Critere AIC avec la variable thal : 174,18
# Critere AIC sans la variable thal : 178,5
## Predictions
prediction = predict(RegressionLogistique, test, type = "response")
prediction
tableau_prediction = as.data.frame(prediction)
creation_fonction = function(x){
return(ifelse(x>0.5,1,0))
}
tableau_prediction = apply(tableau_prediction, 2, creation_fonction)
## Mesure des performances du modele
levels(test$target) <- c(0,1)
library(caret)
confusionMatrix(as.factor(test$target), as.factor(tableau_prediction))
## Tableau de comparaison
tableau_comparaison = cbind(test, tableau_prediction)
tableau_comparaison$prediction <- as.factor(tableau_comparaison$prediction)
levels(tableau_comparaison$target) <- c("Non", "Oui")
levels(tableau_comparaison$prediction) <- c("Non", "Oui")
## Test de Hosmer et Lemeshow
## H0 : L'ajustement du modele aux donnees est bon (si p-value > 0.05)
## H1 : L'ajustement du modele aux donnees est mauvais (si p-value < 0.05)
library(performance)
performance_hosmer(RegressionLogistique)
## Creation de la courbe ROC
library(pROC)
par(pty = "s")
roc(train$target, RegressionLogistique$fitted.values,
plot = TRUE,
main = "Courbe ROC du modele de regression logistique",
col = "#377eb8",
lwd = 4,
xlab = "Taux de Faux Positifs",
ylab = "Taux de Vrais Positifs",
legacy.axes = TRUE
)
install.packages("correlationfunnel")
library(correlationfunnel)
# Data importation
data <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"), header = FALSE)
# Data Formatting
## Columns name
colnames(data) <- c("age", "sex", "chest_pain", "rest_bp", "chol", "fbs", "rest_ecg", "max_hr", "ex_ang", "oldpeak", "slope", "ca", "thalassemia", "target")
## target columns mistakes
data$target[data$target==2] <- 1
data$target[data$target==3] <- 1
data$target[data$target==4] <- 1
## Missing values
valeurs_manquantes_ca <- which(data$ca %in% "?")
valeurs_manquantes_thalassemia <-which(data$thalassemia %in% "?")
valeurs_manquantes <- c(valeurs_manquantes_ca, valeurs_manquantes_thalassemia)
valeurs_manquantes
data <- data[-valeurs_manquantes,]
apply(data, 2, anyNA)
## Data type
str(data)
## Qualitative variables (as factor)
data$sex <- as.factor(data$sex)
data$chest_pain <- as.factor(data$chest_pain)
data$fbs <- as.factor(data$fbs)
data$rest_ecg <- as.factor(data$rest_ecg)
data$ex_ang <- as.factor(data$ex_ang)
data$slope <- as.factor(data$slope)
data$ca <- as.factor(data$ca)
data$thalassemia <- as.factor(data$thalassemia)
data$target <- as.factor(data$target)
## Quantitative variables (as int)
data$age <- as.integer(data$age)
data$rest_bp <- as.integer(data$rest_bp)
data$chol <- as.integer(data$chol)
data$max_hr <- as.integer(data$max_hr)
data$oldpeak <- as.integer(data$oldpeak)
str(data)
## Recoding variables
levels(data$sex) <- c("Femme", "Homme")
levels(data$chest_pain) <- c("Angine stable", "Angine instable", "Autres douleurs", "Asymptomatique")
levels(data$fbs) <- c("Non", "Oui")
levels(data$rest_ecg) <- c("Normal", "Anomalies", "Hypertrophie")
levels(data$ex_ang) <- c("Non", "Oui")
levels(data$slope) <- c("En hausse", "Stable", "En baisse")
levels(data$ca) <- c("Absence d'anomalie", "Faible", "Moyen", "Eleve")
levels(data$thalassemia) <- c("Non", "Thalassemie sous controle", "Thalassemie instable")
levels(data$target) <- c("Non", "Oui")
str(data)
## Variable sex :
table(data$sex) # Effectifs
round(prop.table(table(data$sex)), 4)*100 # Pourcentages
## Variable chest pain type :
table(data$chest_pain)
round(prop.table(table(data$chest_pain)), 4)*100
## Variable fasting blood sugar >120mg/dl
table(data$fbs)
round(prop.table(table(data$fbs)), 4)*100
## Variable resting ecg :
table(data$rest_ecg)
round(prop.table(table(data$rest_ecg)), 4)*100
## Variable exercise-induced angina :
table(data$ex_ang)
round(prop.table(table(data$ex_ang)), 4)*100
## Variable slope of the peak exercise ST segment :
table(data$slope)
round(prop.table(table(data$slope)), 4)*100
## Variable number of major vessels colored by fluoroscopy
table(data$ca)
round(prop.table(table(data$ca)), 4)*100
## Variable thalassemia
table(data$thalassemia)
round(prop.table(table(data$thalassemia)), 4)*100
## Variable diagnosis of heart disease
table(data$target)
round(prop.table(table(data$target)), 4)*100
## Minimum, quartiles, median, mean and max
summary(data$age)
summary(data$rest_bp)
summary(data$chol)
summary(data$max_hr)
summary(data$oldpeak)
library(vtable)
summary_table = st(data)
summary_table
## Variance et ecart-type
var(data$age)
sd(data$age)
var(data$rest_bp)
sd(data$rest_bp)
var(data$chol)
sd(data$chol)
var(data$max_hr)
sd(data$max_hr)
var(data$oldpeak)
sd(data$oldpeak)
#Correlation
library(correlationfunnel)
HD_binarized <- data %>%
binarize(n_bins = 4, thresh_infreq = 0.01)
HD_binarized %>%
correlate(target__Oui)
correlation_graph <- HD_binarized %>%
correlate(target__Oui) %>%
plot_correlation_funnel()
correlation_graph
# Barplot(qualitative)
## Variable sex
graphSex <- plot(data$sex,
xlab = "Sexe",
ylab = "Effectifs",
main = "Repartition des patients selon le sexe",
las = 1,
# horiz = T
sub = "Donnees : Heart Disease Data Set (UCI Machine Learning)",
# names.arg = c("Feminin", "Masculin"),
# space = 2
# col = "red"
col = c("#e63946", "#a8dadc"),
# border = "blue",
# density = 80,
# yaxt = 'n'
cex.main = 1.8,
cex.axis = 1,
cex.lab = 1.2,
ylim = c(0, 250)
)
text(x = graphSex, y = table(data$sex)+10, labels = as.character(table(data$sex)),
cex = 1.1, font = 3)
## Variable diagnosis heart disease
graphTarget <- plot(data$target,
xlab = "Diagnostique de maladies caridovasculaire",
ylab = "Effectifs",
main = "Repartition des patients selon l'apparition d'une maladie cardiovasculaire",
space = 0.3,
col = c("#e63946", "#f1faee"),
cex.main = 1.5,
cex.lab = 1.2,
ylim = c(0,200)
)
text(x = graphTarget, y = table(data$target)+7,
labels = as.character(table(data$target)), cex = 1.1, font = 3)
## Variable thalassemia
graphThal <- plot(data$thalassemia,
xlab = "Thalassemia",
ylab = "Effectifs",
main = "Repartition des patients selon la présence de thalassemia",
space = 0.3,
col = c("#75DDDD", "#508991", "#172A3A"),
cex.main = 1.5,
cex.lab = 1.2,
ylim = c(0,200)
)
text(x = graphThal, y = table(data$thalassemia)+7,
labels = as.character(table(data$thalassemia)), cex = 1.1, font = 3)
## Variable chest pain type
graphCP <- plot(data$chest_pain,
xlab = "Chest pain type",
ylab = "Effectifs",
main = "Repartition des patients selon le type de douleurs thoracique",
space = 0.3,
col = c("#004346", "#588157","#a3b18a", "#dad7cd"),
cex.main = 1.5,
cex.lab = 1.2,
ylim = c(0,200)
)
text(x = graphCP, y = table(data$chest_pain)+7,
labels = as.character(table(data$chest_pain)), cex = 1.1, font = 3)
# Boxplot (quantitative)
## Variable age
graphAge <- boxplot(data$age,
ylab = "Age",
main = "Boite a moustache de la population selon l'age",
col = "#f77f00",
las = 1,
cex.main = 1.7,
cex.lab = 1.2,
sub = "Donnees : Heart Disease Data Set (UCI Machine Learning)",
# horizontal = TRUE
notch = TRUE,
# border = "blue"
ylim = c(20,80)
)
# Barplot
## Variables target/sex
barplotST <- barplot(table(data$target, data$sex),
beside = TRUE,
col = c("#003049", "#d62828"),
xlab = "Sexe",
ylab = "Patients",
las = 1,
main = "Repartition des patents selon la presence d'une maladie cardiovasculaire \n et le sexe",
ylim = c(0,150),
cex.main = 1.2,
cex.lab = 1.2
)
legend("top", legend = levels(data$target), fill = c("#003049", "#d62828"),
title = "Maladie cardiovasculaire", horiz = TRUE)
text(x = barplotST, y = table(data$target, data$sex)+7,
labels = as.character(table(data$target, data$sex)), cex = 1.1, font = 3)
## Variables target/thal
barplotThalT <- barplot(table(data$target, data$thalassemia),
beside = TRUE,
col = c("#003049", "#d62828"),
xlab = "Thalassemia",
ylab = "Patients",
las = 1,
main = "Repartition des patents selon la presence d'une maladie cardiovasculaire \n et de thalassemie",
ylim = c(0,150),
cex.main = 1.2,
cex.lab = 1.2
)
legend("top", legend = levels(data$target), fill = c("#003049", "#d62828"),
title = "Maladie cardiovasculaire", horiz = TRUE)
text(x = barplotThalT, y = table(data$target, data$thalassemia)+7,
labels = as.character(table(data$target, data$thalassemia)), cex = 1.1, font = 3)
## Variables target/chest_pain
barplotTC <- barplot(table(data$target, data$chest_pain),
beside = TRUE,
col = c("#003049", "#d62828"),
xlab = "Type of chest pain",
ylab = "Patients",
las = 1,
main = "Repartition des patents selon la presence d'une maladie cardiovasculaire \n et du type de douleurs thoracique",
ylim = c(0,150),
cex.main = 1.2,
cex.lab = 1.2
)
legend("top", legend = levels(data$target), fill = c("#003049", "#d62828"),
title = "Maladie cardiovasculaire", horiz = TRUE)
text(x = barplotTC, y = table(data$target, data$chest_pain)+7,
labels = as.character(table(data$target, data$chest_pain)), cex = 1.1, font = 3)
## Variable target/age
boxplot(data$age ~ data$target,
main = "Boite a moustaches de la population selon l'age et la presence \n de maladie cardiovasculaire",
xlab = "Presence d'une maladie cardiovasculaire",
ylab = "Age",
col = "yellow",
las = 1,
ylim = c(20, 80),
cex.main = 1.2,
cex.lab = 1.2
)
## Variable target/trestbps
boxplot(data$rest_bp ~ data$target,
main = "Boite a moustaches de la population selon la tension arterielle au repos \n et la presence de maladie cardiovasculaire",
xlab = "Presence d'une maladie cardiovasculaire",
ylab = "Tension arterielle au repos",
col = "yellow",
las = 1,
cex.main = 1.2,
cex.lab = 1.2
)
## Calcul des pourcentages
round(prop.table(table(data$sex, data$target), margin = 1), 4)*100
round(prop.table(table(data$chest_pain, data$target), margin = 1), 4)*100
round(prop.table(table(data$ex_ang, data$target), margin = 1), 4)*100
round(prop.table(table(data$slope, data$target), margin = 1), 4)*100
round(prop.table(table(data$ca, data$target), margin = 1), 4)*100
round(prop.table(table(data$thalassemia, data$target), margin = 1), 4)*100
## Test du Khi-2 (variables qualitatives)
## H0 : Les deux variables sont independantes (si p-value > 0,05)
## H1 : Les deux variables sont dependantes (si p-value < 0,05)
chisq.test(data$sex, data$target) #H1
chisq.test(data$chest_pain, data$target) #H1
chisq.test(data$fbs, data$target) #H0
chisq.test(data$rest_ecg, data$target) #H1
chisq.test(data$ex_ang, data$target) #H1
chisq.test(data$slope, data$target) #H1
chisq.test(data$ca, data$target) #H1
chisq.test(data$thalassemia, data$target) #H1
## Calcul des moyennes
tapply(data$age, data$target, mean)
tapply(data$rest_bp, data$target, mean)
tapply(data$chol, data$target, mean)
tapply(data$max_hr, data$target, mean)
tapply(data$oldpeak, data$target, mean)
## Test de Shapiro-Wilk
### H0 : L'echantillon suit une distribution normale (si p-value > 0,05)
### H1 : L'echantillon ne suit pas une distribution normale (si p-value < 0,05)
library(dplyr)
shapiro.test(filter(data, target == "Oui")$age) # H1
shapiro.test(filter(data, target == "Oui")$rest_bp) # H1
shapiro.test(filter(data, target == "Oui")$chol) # H0
shapiro.test(filter(data, target == "Oui")$max_hr) # H0
shapiro.test(filter(data, target == "Oui")$oldpeak) # H1
## Test de Mann-Whitney
### H0 : Il n'y a pas de difference significative entre la moyenne des deux variables (si p-value > 0,05)
### H1 : Il y a une difference significative entre la moyenne des deux variables (si p-value < 0,05)
wilcox.test(data$age~data$target)
wilcox.test(data$rest_bp~data$target)
wilcox.test(data$oldpeak~data$target)
## Test de Student
### H0 : Il n'y a pas de difference significative entre la moyenne des deux variables (si p-value > 0,05)
### H1 : Il y a une difference significative entre la moyenne des deux variables (si p-value < 0,05)
t.test(data$chol~data$target)
t.test(data$max_hr~data$target)
## Division du jeu de donnees en jeu d'entrainement et de test
set.seed(99)
library(caTools)
split = sample.split(data$target, SplitRatio = 0.8)
train = subset(data, split == TRUE)
test = subset(data, split == FALSE)
## Creation du modele
RegressionLogistique = glm(target ~., data = train, family = "binomial")
summary(RegressionLogistique)
## Optimisation du modele de regression logistique pour ne conserver que les variables significatives
RegressionLogistique = update(RegressionLogistique, .~.-rest_ecg)
RegressionLogistique = update(RegressionLogistique, .~.-slope)
RegressionLogistique = update(RegressionLogistique, .~.-thalassemia)
RegressionLogistique = update(RegressionLogistique, .~.-age)
RegressionLogistique = update(RegressionLogistique, .~.-fbs)
RegressionLogistique = update(RegressionLogistique, .~.-chol)
RegressionLogistique = update(RegressionLogistique, .~.-max_hr)
RegressionLogistique = update(RegressionLogistique, .~.-rest_bp)
summary(RegressionLogistique)
## Predictions
prediction = predict(RegressionLogistique, test, type = "response")
prediction
tableau_prediction = as.data.frame(prediction)
creation_fonction = function(x){
return(ifelse(x>0.5,1,0))
}
tableau_prediction = apply(tableau_prediction, 2, creation_fonction)
## Mesure des performances du modele
levels(test$target) <- c(0,1)
library(caret)
confusionMatrix(as.factor(test$target), as.factor(tableau_prediction))
## Tableau de comparaison
tableau_comparaison = cbind(test, tableau_prediction)
tableau_comparaison$prediction <- as.factor(tableau_comparaison$prediction)
levels(tableau_comparaison$target) <- c("Non", "Oui")
levels(tableau_comparaison$prediction) <- c("Non", "Oui")
## Test de Hosmer et Lemeshow
## H0 : L'ajustement du modele aux donnees est bon (si p-value > 0.05)
## H1 : L'ajustement du modele aux donnees est mauvais (si p-value < 0.05)
library(performance)
performance_hosmer(RegressionLogistique)
## Creation de la courbe ROC
library(pROC)
par(pty = "s")
roc(train$target, RegressionLogistique$fitted.values,
plot = TRUE,
main = "Courbe ROC du modele de regression logistique",
col = "#377eb8",
lwd = 4,
xlab = "Taux de Faux Positifs",
ylab = "Taux de Vrais Positifs",
legacy.axes = TRUE
)
